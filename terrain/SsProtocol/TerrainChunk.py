# automatically generated by the FlatBuffers compiler, do not modify

# namespace: SsProtocol

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class TerrainChunk(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsTerrainChunk(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = TerrainChunk()
        x.Init(buf, n + offset)
        return x

    # TerrainChunk
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # TerrainChunk
    def CellSizeLog2(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint8Flags, o + self._tab.Pos)
        return 0

    # TerrainChunk
    def CellCoord(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from SsProtocol.Vec3_u32 import Vec3_u32
            obj = Vec3_u32()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TerrainChunk
    def CellPositions(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 12
            from SsProtocol.Vec3_f import Vec3_f
            obj = Vec3_f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TerrainChunk
    def CellPositionsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TerrainChunk
    def CellPositionsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        return o == 0

    # TerrainChunk
    def CellMaterials(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            a = self._tab.Vector(o)
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, a + flatbuffers.number_types.UOffsetTFlags.py_type(j * 4))
        return 0

    # TerrainChunk
    def CellMaterialsAsNumpy(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.GetVectorAsNumpy(flatbuffers.number_types.Uint32Flags, o)
        return 0

    # TerrainChunk
    def CellMaterialsLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TerrainChunk
    def CellMaterialsIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        return o == 0

    # TerrainChunk
    def Particles(self, j):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            x = self._tab.Vector(o)
            x += flatbuffers.number_types.UOffsetTFlags.py_type(j) * 4
            x = self._tab.Indirect(x)
            from SsProtocol.Particle import Particle
            obj = Particle()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # TerrainChunk
    def ParticlesLength(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        if o != 0:
            return self._tab.VectorLen(o)
        return 0

    # TerrainChunk
    def ParticlesIsNone(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(12))
        return o == 0

def TerrainChunkStart(builder): builder.StartObject(5)
def TerrainChunkAddCellSizeLog2(builder, cellSizeLog2): builder.PrependUint8Slot(0, cellSizeLog2, 0)
def TerrainChunkAddCellCoord(builder, cellCoord): builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(cellCoord), 0)
def TerrainChunkAddCellPositions(builder, cellPositions): builder.PrependUOffsetTRelativeSlot(2, flatbuffers.number_types.UOffsetTFlags.py_type(cellPositions), 0)
def TerrainChunkStartCellPositionsVector(builder, numElems): return builder.StartVector(12, numElems, 4)
def TerrainChunkAddCellMaterials(builder, cellMaterials): builder.PrependUOffsetTRelativeSlot(3, flatbuffers.number_types.UOffsetTFlags.py_type(cellMaterials), 0)
def TerrainChunkStartCellMaterialsVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def TerrainChunkAddParticles(builder, particles): builder.PrependUOffsetTRelativeSlot(4, flatbuffers.number_types.UOffsetTFlags.py_type(particles), 0)
def TerrainChunkStartParticlesVector(builder, numElems): return builder.StartVector(4, numElems, 4)
def TerrainChunkEnd(builder): return builder.EndObject()
