# automatically generated by the FlatBuffers compiler, do not modify

# namespace: SsProtocol

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Environment(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsEnvironment(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Environment()
        x.Init(buf, n + offset)
        return x

    # Environment
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Environment
    def ColorAmbient(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from SsProtocol.Vec4_f import Vec4_f
            obj = Vec4_f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Environment
    def LightColor(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from SsProtocol.Vec4_f import Vec4_f
            obj = Vec4_f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Environment
    def LightPower(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Environment
    def ScreenGamma(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 2.2

def EnvironmentStart(builder): builder.StartObject(4)
def EnvironmentAddColorAmbient(builder, colorAmbient): builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(colorAmbient), 0)
def EnvironmentAddLightColor(builder, lightColor): builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(lightColor), 0)
def EnvironmentAddLightPower(builder, lightPower): builder.PrependFloat32Slot(2, lightPower, 0.0)
def EnvironmentAddScreenGamma(builder, screenGamma): builder.PrependFloat32Slot(3, screenGamma, 2.2)
def EnvironmentEnd(builder): return builder.EndObject()
