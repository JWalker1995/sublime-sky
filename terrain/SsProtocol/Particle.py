# automatically generated by the FlatBuffers compiler, do not modify

# namespace: SsProtocol

import flatbuffers
from flatbuffers.compat import import_numpy
np = import_numpy()

class Particle(object):
    __slots__ = ['_tab']

    @classmethod
    def GetRootAsParticle(cls, buf, offset):
        n = flatbuffers.encode.Get(flatbuffers.packer.uoffset, buf, offset)
        x = Particle()
        x.Init(buf, n + offset)
        return x

    # Particle
    def Init(self, buf, pos):
        self._tab = flatbuffers.table.Table(buf, pos)

    # Particle
    def Position(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(4))
        if o != 0:
            x = o + self._tab.Pos
            from SsProtocol.Vec3_f import Vec3_f
            obj = Vec3_f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Particle
    def Velocity(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(6))
        if o != 0:
            x = o + self._tab.Pos
            from SsProtocol.Vec3_f import Vec3_f
            obj = Vec3_f()
            obj.Init(self._tab.Bytes, x)
            return obj
        return None

    # Particle
    def Mass(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(8))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Float32Flags, o + self._tab.Pos)
        return 0.0

    # Particle
    def Type(self):
        o = flatbuffers.number_types.UOffsetTFlags.py_type(self._tab.Offset(10))
        if o != 0:
            return self._tab.Get(flatbuffers.number_types.Uint32Flags, o + self._tab.Pos)
        return 0

def ParticleStart(builder): builder.StartObject(4)
def ParticleAddPosition(builder, position): builder.PrependStructSlot(0, flatbuffers.number_types.UOffsetTFlags.py_type(position), 0)
def ParticleAddVelocity(builder, velocity): builder.PrependStructSlot(1, flatbuffers.number_types.UOffsetTFlags.py_type(velocity), 0)
def ParticleAddMass(builder, mass): builder.PrependFloat32Slot(2, mass, 0.0)
def ParticleAddType(builder, type): builder.PrependUint32Slot(3, type, 0)
def ParticleEnd(builder): return builder.EndObject()
